#!/bin/bash

# Script d'analyse des fichiers non utilis√©s
echo "üîç Analyse des fichiers potentiellement inutiles..."
echo ""

# Couleurs pour l'affichage
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Compteurs
UNUSED_FILES=0
DUPLICATE_FILES=0
LARGE_FILES=0
OLD_FILES=0

echo "üìä ANALYSE G√âN√âRALE"
echo "==================="

# Compter les fichiers par type
echo "Fichiers TypeScript: $(find src -name "*.ts" | wc -l)"
echo "Fichiers React: $(find src -name "*.tsx" | wc -l)"
echo "Fichiers CSS: $(find src -name "*.css" | wc -l)"
echo "Fichiers JSON: $(find src -name "*.json" | wc -l)"
echo ""

echo "üîç 1. FICHIERS VOLUMINEUX (>1000 lignes)"
echo "=========================================="
find src -name "*.ts" -o -name "*.tsx" | while read file; do
    lines=$(wc -l < "$file" 2>/dev/null || echo 0)
    if [ "$lines" -gt 1000 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $file: $lines lignes${NC}"
        LARGE_FILES=$((LARGE_FILES + 1))
    fi
done

echo ""
echo "üîç 2. FICHIERS POTENTIELLEMENT NON UTILIS√âS"
echo "============================================"

# Rechercher les fichiers qui ne sont pas import√©s
find src -name "*.ts" -name "*.tsx" | while read file; do
    filename=$(basename "$file" .ts)
    filename=$(basename "$filename" .tsx)
    
    # Ignorer certains fichiers syst√®me
    if [[ "$file" == *"App.tsx"* ]] || [[ "$file" == *"main.tsx"* ]] || [[ "$file" == *"index."* ]]; then
        continue
    fi
    
    # Chercher des imports de ce fichier
    imports_count=$(grep -r "import.*$filename" src/ 2>/dev/null | grep -v "$file" | wc -l)
    
    if [ "$imports_count" -eq 0 ]; then
        echo -e "${RED}‚ùå Potentiellement non utilis√©: $file${NC}"
        UNUSED_FILES=$((UNUSED_FILES + 1))
    fi
done

echo ""
echo "üîç 3. FICHIERS DUPLIQU√âS OU SIMILAIRES"
echo "======================================"

# Rechercher des noms de fichiers similaires
find src -name "*.ts" -o -name "*.tsx" | sed 's/.*\///' | sort | uniq -d | while read duplicate; do
    echo -e "${YELLOW}üîÑ Nom dupliqu√©: $duplicate${NC}"
    find src -name "$duplicate" -type f
    echo ""
    DUPLICATE_FILES=$((DUPLICATE_FILES + 1))
done

echo ""
echo "üîç 4. FICHIERS AVEC PATTERNS OBSOL√àTES"
echo "======================================"

# Rechercher des patterns obsol√®tes
echo "Fichiers avec 'any' TypeScript:"
grep -r ":\s*any" src/ --include="*.ts" --include="*.tsx" | cut -d: -f1 | sort | uniq | while read file; do
    count=$(grep -c ":\s*any" "$file" 2>/dev/null || echo 0)
    if [ "$count" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $file: $count occurrences de 'any'${NC}"
    fi
done

echo ""
echo "Fichiers avec console.log restants:"
grep -r "console\.log" src/ --include="*.ts" --include="*.tsx" | cut -d: -f1 | sort | uniq | while read file; do
    count=$(grep -c "console\.log" "$file" 2>/dev/null || echo 0)
    if [ "$count" -gt 0 ]; then
        echo -e "${RED}üêõ $file: $count console.log restants${NC}"
    fi
done

echo ""
echo "üîç 5. FICHIERS CSS NON UTILIS√âS"
echo "==============================="

find src -name "*.css" | while read cssfile; do
    filename=$(basename "$cssfile" .css)
    
    # Chercher des imports de ce fichier CSS
    imports_count=$(grep -r "import.*$filename" src/ 2>/dev/null | wc -l)
    
    if [ "$imports_count" -eq 0 ]; then
        echo -e "${RED}‚ùå CSS non utilis√©: $cssfile${NC}"
    fi
done

echo ""
echo "üîç 6. FICHIERS DE CONFIGURATION OBSOL√àTES"
echo "=========================================="

# V√©rifier des fichiers de config potentiellement obsol√®tes
config_files=(
    ".babelrc"
    "webpack.config.js"
    "rollup.config.js"
    "parcel.config.js"
    "jest.config.js"
    ".eslintrc.js"
    ".eslintrc.json"
    "tsconfig.old.json"
)

for config in "${config_files[@]}"; do
    if [ -f "$config" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Fichier de config potentiellement obsol√®te: $config${NC}"
    fi
done

echo ""
echo "üßπ 7. RECOMMANDATIONS DE NETTOYAGE"
echo "=================================="

echo -e "${BLUE}üìã Actions recommand√©es:${NC}"
echo ""

echo "1. üóëÔ∏è  SUPPRESSION S√âCURIS√âE:"
echo "   - Sauvegarder le projet avant suppression"
echo "   - Tester apr√®s chaque suppression"
echo "   - Utiliser git pour tracer les changements"
echo ""

echo "2. üîÑ REFACTORISATION:"
echo "   - Diviser les gros fichiers (>1000 lignes)"
echo "   - √âliminer les types 'any' TypeScript"
echo "   - Supprimer les console.log restants"
echo ""

echo "3. üì¶ OPTIMISATION:"
echo "   - Regrouper les fichiers similaires"
echo "   - Cr√©er des index.ts pour les exports"
echo "   - Utiliser tree shaking pour le build"
echo ""

echo "4. üõ°Ô∏è  S√âCURIT√â:"
echo "   - Supprimer les fichiers de test en production"
echo "   - Nettoyer les configurations obsol√®tes"
echo "   - V√©rifier les d√©pendances inutiles"
echo ""

echo -e "${GREEN}‚úÖ Analyse termin√©e!${NC}"
echo ""
echo "üí° Conseil: Commencez par les fichiers volumineux et les console.log restants."
echo "‚ö†Ô∏è  Attention: Toujours tester apr√®s suppression d'un fichier!"