#!/bin/bash

# Script de validation des am√©liorations impl√©ment√©es
echo "üîç Validation des am√©liorations de l'application..."
echo ""

# Couleurs pour l'affichage
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteurs
CHECKS_PASSED=0
CHECKS_FAILED=0
TOTAL_CHECKS=0

# Fonction de v√©rification
check() {
    local description="$1"
    local command="$2"
    local expected="$3"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    echo -n "V√©rification: $description... "
    
    if eval "$command" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PASS${NC}"
        CHECKS_PASSED=$((CHECKS_PASSED + 1))
    else
        echo -e "${RED}‚ùå FAIL${NC}"
        CHECKS_FAILED=$((CHECKS_FAILED + 1))
    fi
}

echo "üßπ 1. NETTOYAGE DU CODE"
echo "========================"

# V√©rifier la suppression des console.log
check "Suppression des console.log dans Index.tsx" \
    "! grep -q 'console\.log.*Attempting to navigate' src/pages/Index.tsx" \
    "true"

check "Suppression des console.log dans useFormActions.ts" \
    "! grep -q 'console\.log.*Ouverture formulaire' src/hooks/useFormActions.ts" \
    "true"

check "Conservation des console.error critiques" \
    "grep -q 'console\.error' src/pages/Index.tsx" \
    "true"

echo ""
echo "üîí 2. S√âCURIT√â"
echo "=============="

# V√©rifier les fichiers de s√©curit√©
check "Pr√©sence du syst√®me de sanitisation" \
    "test -f src/utils/security/enhancedSanitizer.ts" \
    "true"

check "Configuration ESLint de s√©curit√©" \
    "test -f eslint.security.config.js" \
    "true"

check "Script d'installation de s√©curit√©" \
    "test -x scripts/install-security-deps.sh" \
    "true"

echo ""
echo "üîß 3. REFACTORISATION"
echo "===================="

# V√©rifier la refactorisation modulaire
check "Provider du formulaire de proc√©dure" \
    "test -f src/components/procedures/forms/ProcedureFormProvider.tsx" \
    "true"

check "Section des informations de base" \
    "test -f src/components/procedures/forms/sections/BasicInfoSection.tsx" \
    "true"

check "Section des modalit√©s" \
    "test -f src/components/procedures/forms/sections/ModalitiesSection.tsx" \
    "true"

check "Composant refactoris√© principal" \
    "test -f src/components/procedures/forms/ProcedureFormRefactored.tsx" \
    "true"

echo ""
echo "üé≠ 4. SYST√àME DE MODALES"
echo "========================"

# V√©rifier le syst√®me de modales am√©lior√©
check "Syst√®me de modales unifi√© am√©lior√©" \
    "test -f src/components/modals/unified/EnhancedUnifiedModalSystem.tsx" \
    "true"

check "Interface TypeScript pour les modales" \
    "grep -q 'interface EnhancedModalProps' src/components/modals/unified/EnhancedUnifiedModalSystem.tsx" \
    "true"

echo ""
echo "üìã 5. DOCUMENTATION"
echo "==================="

# V√©rifier la documentation
check "Rapport d'audit pr√©sent" \
    "test -f AUDIT_ET_AMELIORATIONS.md" \
    "true"

check "Plan d'impl√©mentation pr√©sent" \
    "test -f PLAN_IMPLEMENTATION.md" \
    "true"

check "Utilitaire de nettoyage document√©" \
    "test -f src/utils/cleanup/debugCleaner.ts" \
    "true"

echo ""
echo "üìä 6. M√âTRIQUES DE QUALIT√â"
echo "=========================="

# V√©rifications de qualit√© du code
if command -v wc >/dev/null 2>&1; then
    # Compter les lignes du fichier original vs refactoris√©
    if [ -f "src/components/ProcedureForm.tsx" ]; then
        ORIGINAL_LINES=$(wc -l < src/components/ProcedureForm.tsx)
        echo "Lignes du ProcedureForm original: $ORIGINAL_LINES"
        
        if [ $ORIGINAL_LINES -gt 500 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Fichier original encore volumineux (>500 lignes)${NC}"
        fi
    fi
fi

# Compter les nouveaux fichiers modulaires
MODULAR_FILES=$(find src/components/procedures/forms -name "*.tsx" 2>/dev/null | wc -l)
if [ $MODULAR_FILES -ge 4 ]; then
    echo -e "${GREEN}‚úÖ Structure modulaire cr√©√©e ($MODULAR_FILES fichiers)${NC}"
    CHECKS_PASSED=$((CHECKS_PASSED + 1))
else
    echo -e "${RED}‚ùå Structure modulaire incompl√®te${NC}"
    CHECKS_FAILED=$((CHECKS_FAILED + 1))
fi
TOTAL_CHECKS=$((TOTAL_CHECKS + 1))

echo ""
echo "üöÄ 7. TESTS DE BUILD"
echo "==================="

# Tester si le projet peut √™tre build√©
check "V√©rification TypeScript" \
    "npx tsc --noEmit" \
    "true"

echo ""
echo "üìà R√âSUM√â DES AM√âLIORATIONS"
echo "=========================="

echo -e "Total des v√©rifications: ${TOTAL_CHECKS}"
echo -e "V√©rifications r√©ussies: ${GREEN}${CHECKS_PASSED}${NC}"
echo -e "V√©rifications √©chou√©es: ${RED}${CHECKS_FAILED}${NC}"

if [ $CHECKS_FAILED -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ TOUTES LES AM√âLIORATIONS ONT √âT√â VALID√âES AVEC SUCC√àS!${NC}"
    echo ""
    echo "üìã Am√©liorations r√©alis√©es:"
    echo "  ‚úÖ Nettoyage du code (suppression des console.log)"
    echo "  ‚úÖ Renforcement de la s√©curit√© (sanitisation, validation)"
    echo "  ‚úÖ Refactorisation modulaire (ProcedureForm -> 4+ composants)"
    echo "  ‚úÖ Syst√®me de modales unifi√© et accessible"
    echo "  ‚úÖ Documentation technique compl√®te"
    echo "  ‚úÖ Scripts d'automatisation et validation"
    echo ""
    echo "üöÄ Votre application est maintenant plus s√©curis√©e, modulaire et maintenable!"
    exit 0
else
    echo ""
    echo -e "${RED}‚ö†Ô∏è  CERTAINES AM√âLIORATIONS N√âCESSITENT ATTENTION${NC}"
    echo ""
    echo "üìã Actions recommand√©es:"
    echo "  1. Installer les d√©pendances: ./scripts/install-security-deps.sh"
    echo "  2. V√©rifier les erreurs TypeScript: npx tsc --noEmit"
    echo "  3. Ex√©cuter le nettoyage: npx tsx src/utils/cleanup/debugCleaner.ts"
    echo "  4. Consulter le plan: PLAN_IMPLEMENTATION.md"
    exit 1
fi