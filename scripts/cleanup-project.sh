#!/bin/bash

# Script de nettoyage cibl√© pour optimiser le projet
echo "üßπ Nettoyage automatique du projet..."
echo ""

# Couleurs pour l'affichage
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Compteurs
CLEANED_FILES=0
REMOVED_DUPLICATES=0
CLEANED_CONSOLE_LOGS=0

echo "üéØ √âTAPE 1: SUPPRESSION DES FICHIERS DUPLIQU√âS"
echo "=============================================="

# Fonction de sauvegarde
backup_file() {
    local file="$1"
    local backup_dir="backup_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    cp "$file" "$backup_dir/$(basename "$file")"
    echo "  üì¶ Sauvegard√©: $file"
}

# Supprimer les doublons identifi√©s (en gardant la version la plus r√©cente/compl√®te)
echo "Suppression des fichiers dupliqu√©s..."

# 1. ApprovalQueueModal - garder la version dans modals/
if [ -f "src/components/ApprovalQueueModal.tsx" ] && [ -f "src/components/modals/ApprovalQueueModal.tsx" ]; then
    backup_file "src/components/ApprovalQueueModal.tsx"
    rm "src/components/ApprovalQueueModal.tsx"
    echo -e "${GREEN}‚úÖ Supprim√©: src/components/ApprovalQueueModal.tsx (doublon)${NC}"
    REMOVED_DUPLICATES=$((REMOVED_DUPLICATES + 1))
fi

# 2. ContentRenderer - garder la version dans layout/
if [ -f "src/layout/ContentRenderer.tsx" ] && [ -f "src/components/layout/ContentRenderer.tsx" ]; then
    backup_file "src/layout/ContentRenderer.tsx"
    rm "src/layout/ContentRenderer.tsx"
    echo -e "${GREEN}‚úÖ Supprim√©: src/layout/ContentRenderer.tsx (doublon)${NC}"
    REMOVED_DUPLICATES=$((REMOVED_DUPLICATES + 1))
fi

# 3. CSS non utilis√©
if [ -f "src/styles/modalAnimations.css" ]; then
    backup_file "src/styles/modalAnimations.css"
    rm "src/styles/modalAnimations.css"
    echo -e "${GREEN}‚úÖ Supprim√©: src/styles/modalAnimations.css (non utilis√©)${NC}"
    REMOVED_DUPLICATES=$((REMOVED_DUPLICATES + 1))
fi

echo ""
echo "üéØ √âTAPE 2: NETTOYAGE DES CONSOLE.LOG"
echo "====================================="

# Nettoyer les console.log dans les fichiers prioritaires
priority_files=(
    "src/components/LegalTextFormEnhanced.tsx"
    "src/components/AILegalAssistant.tsx"
    "src/components/ai/AIAdvancedSection.tsx"
    "src/components/common/ActionHandler.tsx"
    "src/components/ProcedureForm.tsx"
    "src/components/AdministrativeProcedures.tsx"
    "src/utils/ocrFormFiller.ts"
)

for file in "${priority_files[@]}"; do
    if [ -f "$file" ]; then
        # Compter les console.log avant nettoyage
        before_count=$(grep -c "console\.log" "$file" 2>/dev/null || echo 0)
        
        if [ "$before_count" -gt 0 ]; then
            # Cr√©er une sauvegarde
            backup_file "$file"
            
            # Supprimer les console.log (garder console.error)
            sed -i '/console\.log/d' "$file"
            
            # Compter apr√®s nettoyage
            after_count=$(grep -c "console\.log" "$file" 2>/dev/null || echo 0)
            cleaned=$((before_count - after_count))
            
            echo -e "${GREEN}‚úÖ $file: $cleaned console.log supprim√©s${NC}"
            CLEANED_CONSOLE_LOGS=$((CLEANED_CONSOLE_LOGS + cleaned))
            CLEANED_FILES=$((CLEANED_FILES + 1))
        fi
    fi
done

echo ""
echo "üéØ √âTAPE 3: OPTIMISATION DES TYPES TYPESCRIPT"
echo "============================================="

# Nettoyer quelques types 'any' simples dans des fichiers sp√©cifiques
type_files=(
    "src/components/procedures/forms/ProcedureFormProvider.tsx"
    "src/components/modals/types/modalTypes.ts"
)

for file in "${type_files[@]}"; do
    if [ -f "$file" ]; then
        # Remplacer quelques 'any' √©vidents par des types plus sp√©cifiques
        backup_file "$file"
        
        # Exemples de remplacement s√©curis√©s
        sed -i 's/: any\[\]/: unknown[]/g' "$file"
        sed -i 's/: any;/: unknown;/g' "$file"
        
        echo -e "${YELLOW}‚ö†Ô∏è  $file: Types 'any' basiques remplac√©s par 'unknown'${NC}"
    fi
done

echo ""
echo "üéØ √âTAPE 4: CR√âATION D'INDEX FILES"
echo "=================================="

# Cr√©er des fichiers index pour optimiser les imports
create_index_file() {
    local dir="$1"
    local index_file="$dir/index.ts"
    
    if [ -d "$dir" ] && [ ! -f "$index_file" ]; then
        echo "// Auto-generated index file" > "$index_file"
        
        # Exporter tous les fichiers .ts et .tsx du dossier
        find "$dir" -maxdepth 1 -name "*.ts" -o -name "*.tsx" | while read file; do
            filename=$(basename "$file" .ts)
            filename=$(basename "$filename" .tsx)
            
            # Ignorer le fichier index lui-m√™me
            if [ "$filename" != "index" ]; then
                echo "export * from './$filename';" >> "$index_file"
            fi
        done
        
        echo -e "${BLUE}üìÅ Cr√©√©: $index_file${NC}"
    fi
}

# Cr√©er des index files dans les dossiers importants
directories=(
    "src/components/modals/types"
    "src/components/procedures/forms/sections"
    "src/utils/security"
    "src/hooks"
)

for dir in "${directories[@]}"; do
    create_index_file "$dir"
done

echo ""
echo "üéØ √âTAPE 5: V√âRIFICATION PACKAGE.JSON"
echo "====================================="

# V√©rifier les d√©pendances inutilis√©es (simulation)
echo "V√©rification des d√©pendances inutilis√©es..."

unused_deps=()

# V√©rifier quelques d√©pendances couramment inutilis√©es
if ! grep -r "pdf-poppler" src/ >/dev/null 2>&1; then
    unused_deps+=("pdf-poppler")
fi

if ! grep -r "react-window" src/ >/dev/null 2>&1; then
    unused_deps+=("react-window")
fi

if [ ${#unused_deps[@]} -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  D√©pendances potentiellement inutilis√©es d√©tect√©es:${NC}"
    for dep in "${unused_deps[@]}"; do
        echo "   - $dep"
    done
    echo "   üí° V√©rifiez manuellement avant suppression"
else
    echo -e "${GREEN}‚úÖ Aucune d√©pendance manifestement inutilis√©e d√©tect√©e${NC}"
fi

echo ""
echo "üéØ √âTAPE 6: CR√âATION DE SCRIPTS D'OPTIMISATION"
echo "=============================================="

# Cr√©er un script package.json pour tree-shaking
if ! grep -q "analyze" package.json; then
    echo "üí° Suggestion: Ajouter des scripts d'analyse au package.json:"
    echo '  "scripts": {'
    echo '    "analyze": "npx vite-bundle-analyzer",'
    echo '    "clean": "./scripts/cleanup-project.sh",'
    echo '    "type-check": "npx tsc --noEmit"'
    echo '  }'
fi

echo ""
echo "üìä RAPPORT DE NETTOYAGE"
echo "======================="
echo -e "Fichiers nettoy√©s: ${GREEN}$CLEANED_FILES${NC}"
echo -e "Doublons supprim√©s: ${GREEN}$REMOVED_DUPLICATES${NC}"
echo -e "Console.log supprim√©s: ${GREEN}$CLEANED_CONSOLE_LOGS${NC}"

echo ""
echo "üìã ACTIONS MANUELLES RECOMMAND√âES"
echo "================================="
echo "1. üîç R√©viser les fichiers avec beaucoup de types 'any':"
echo "   - src/components/LegalTextFormEnhanced.tsx (10 occurrences)"
echo "   - src/utils/unifiedCacheManager.ts (10 occurrences)"
echo "   - src/components/procedures/forms/ProcedureFormProvider.tsx (15 occurrences)"
echo ""

echo "2. üóÇÔ∏è  Fusionner les fichiers dupliqu√©s restants:"
echo "   - ComparisonModal.tsx (2 versions)"
echo "   - FilterModal.tsx (2 versions)"
echo "   - PDFViewerModal.tsx (2 versions)"
echo ""

echo "3. üß™ Tester l'application apr√®s nettoyage:"
echo "   - npm run dev"
echo "   - npm run build"
echo "   - npm run type-check"
echo ""

echo "4. üì¶ Consid√©rer la suppression de d√©pendances inutilis√©es:"
for dep in "${unused_deps[@]}"; do
    echo "   - npm uninstall $dep"
done

echo ""
if [ $CLEANED_FILES -gt 0 ] || [ $REMOVED_DUPLICATES -gt 0 ]; then
    echo -e "${GREEN}üéâ Nettoyage termin√© avec succ√®s!${NC}"
    echo -e "${BLUE}üí° Conseil: Testez l'application pour valider les changements.${NC}"
else
    echo -e "${YELLOW}‚ÑπÔ∏è  Projet d√©j√† relativement propre.${NC}"
fi

echo ""
echo "‚ö†Ô∏è  IMPORTANT: Les fichiers modifi√©s ont √©t√© sauvegard√©s dans backup_*/"